{"version":3,"sources":["../src/index.js"],"names":["Scope","get","name","hasOwnProperty","e","console","log","message","set","value","exports","use","obj","Object","keys","forEach","key","$","plugins","pluginsPath","Promise","resolve","reject","pluginsPathResolve","path","join","process","cwd","then","paths","pluginPath","env","DEBUG","pluginRequest","require","default","controllers","controllersPath","controllersPathResolve","controllerPath","controllerRequest"],"mappings":";;;;;;;8QAAA;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,QAAQ,EAAZ;;AAEAA,MAAMC,GAAN,GAAY,UAASC,IAAT,EAAe;AACvB,QAAG;AACC,YAAG,KAAKC,cAAL,CAAoBD,IAApB,CAAH,EACI,OAAO,KAAKA,IAAL,CAAP,CADJ,KAGI,MAASA,IAAT;AACP,KALD,CAMA,OAAME,CAAN,EAAQ;AACJC,gBAAQC,GAAR,CAAYF,EAAEG,OAAd;AACA,eAAO,KAAP;AACH;AACJ,CAXD;;AAaAP,MAAMQ,GAAN,GAAY,UAASN,IAAT,EAAeO,KAAf,EAAsB;AAC9B,QAAG;AACC,YAAG,KAAKN,cAAL,CAAoBD,IAApB,CAAH,EACIG,QAAQC,GAAR,CAAeJ,IAAf,mCAAiDO,KAAjD;AACP,KAHD,CAGE,OAAML,CAAN,EAAS,CAAG;;AAEd,QAAGF,SAAS,KAAT,IAAkBA,SAAS,KAA3B,IAAoCA,SAAS,KAAhD,EAAsD;AAClD,aAAKA,IAAL,IAAaO,KAAb;AACAC,gBAAQR,IAAR,IAAgBO,KAAhB;AACH,KAHD,MAII;AACAJ,gBAAQC,GAAR;AACH;AACJ,CAbD;;AAeAN,MAAMW,GAAN,GAAY,UAASC,GAAT,EAAc;AAAA;;AACtB,QAAG,QAAOA,GAAP,yCAAOA,GAAP,MAAc,QAAjB,EAA0B;AACtBC,eAAOC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,UAACC,GAAD,EAAS;AAC9B,kBAAKA,GAAL,IAAYJ,IAAII,GAAJ,CAAZ;AACH,SAFD;AAGH;AACJ,CAND;;AAQO,IAAIC,gBAAIjB,KAAR;kBACQA,K;;AAEf;;AACO,IAAIkB;AAAA,uEAAU,kBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0DACV,IAAIC,OAAJ;AAAA,gGAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,kEAFK,GAEgBC,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyBR,WAAzB,CAFhB;AAAA;AAAA,uDAIL,sBAAO,CAAII,kBAAJ,sBAA4CA,kBAA5C,uBAAP,EAA2FK,IAA3F;AAAA,wHAAgG,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAC5FA,MAAMd,OAAN;AAAA,gJAAc,iBAAOe,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB,oGAAGJ,QAAQK,GAAR,CAAYC,KAAZ,IAAqB,MAAxB,EACI3B,QAAQC,GAAR,yBAAkCwB,UAAlC;;AAEAG,6GAJY,GAIIC,QAAQV,eAAKH,OAAL,CAAaS,UAAb,CAAR,CAJJ;;AAAA,sGAMb,OAAOG,aAAP,IAAwB,UANX;AAAA;AAAA;AAAA;;AAAA;AAAA,uGAONA,eAPM;;AAAA;AAAA;AAAA;;AAAA;AAAA,sGAQR,OAAOA,cAAcE,OAArB,IAAgC,UARxB;AAAA;AAAA;AAAA;;AAAA;AAAA,uGASNF,cAAcE,OAAd,EATM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAAd;;AAAA;AAAA;AAAA;AAAA,4EAD4F;;AAAA;;AAalGd;;AAbkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAhG;;AAAA;AAAA;AAAA;AAAA,oDAJK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoBXhB,wDAAQC,GAAR,oBAA6B,aAAEC,OAA/B;AACAe;;AArBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAZ;;AAAA;AAAA;AAAA;AAAA,4BADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAAA;AAAA;AAAA;AAAA,GAAJ;;AA2BP;AACO,IAAIc;AAAA,wEAAc,kBAAOC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0DACd,IAAIjB,OAAJ;AAAA,gGAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELgB,sEAFK,GAEoBd,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyBU,eAAzB,CAFpB;AAAA;AAAA,uDAIL,sBAAO,CAAIC,sBAAJ,YAAsCA,sBAAtC,cAAP,EAAgFV,IAAhF;AAAA,wHAAqF,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AACvFA,8EAAMd,OAAN;AAAA,gJAAc,kBAAOwB,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACV,oGAAGb,QAAQK,GAAR,CAAYC,KAAZ,IAAqB,MAAxB,EACI3B,QAAQC,GAAR,6BAAsCwB,UAAtC;;AAEAU,iHAJM,GAIcN,QAAQV,eAAKH,OAAL,CAAakB,cAAb,CAAR,CAJd;;AAAA,sGAMP,OAAOC,iBAAP,IAA4B,UANrB;AAAA;AAAA;AAAA;;AAAA;AAAA,uGAOAA,mBAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA,sGAQF,OAAOA,kBAAkBL,OAAzB,IAAoC,UARlC;AAAA;AAAA;AAAA;;AAAA;AAAA,uGASAK,kBAAkBL,OAAlB,EATA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAAd;;AAAA;AAAA;AAAA;AAAA;;AAYAd;;AAbuF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAArF;;AAAA;AAAA;AAAA;AAAA,oDAJK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqBXhB,wDAAQC,GAAR,wBAAiC,aAAEC,OAAnC;AACAe;;AAtBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAZ;;AAAA;AAAA;AAAA;AAAA,4BADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAJ","file":"index.js","sourcesContent":["//Global scope driver\n\nimport path from \"path\";\nimport globby from \"globby\";\nimport _ from \"lodash\";\n\nvar Scope = {};\n\nScope.get = function(name) {\n    try{\n        if(this.hasOwnProperty(name))\n            return this[name]\n        else\n            throw `${name} does not exist in scope`;\n    }\n    catch(e){\n        console.log(e.message);\n        return false;\n    }\n};\n\nScope.set = function(name, value) {\n    try{\n        if(this.hasOwnProperty(name))\n            console.log(`${name} was replaced by the value ${value}`);\n    } catch(e) { }\n\n    if(name !== \"get\" && name !== \"set\" && name !== \"use\"){\n        this[name] = value;\n        exports[name] = value;\n    }\n    else{\n        console.log(`Do not use the names \"get\", \"set\" or \"use\"`);\n    }\n};\n\nScope.use = function(obj) {\n    if(typeof obj == \"object\"){\n        Object.keys(obj).forEach((key) => {\n            this[key] = obj[key];\n        });\n    }\n};\n\nexport let $ = Scope;\nexport default Scope;\n\n//Plugins\nexport let plugins = async (pluginsPath) => {\n    return new Promise(async (resolve, reject) => {\n        try{\n            const pluginsPathResolve = path.join(process.cwd(), pluginsPath);\n\n            await globby([`${pluginsPathResolve}/build/index.js`, `${pluginsPathResolve}/*/build/index.js`]).then(async (paths) => {\n                await paths.forEach(async (pluginPath) => {\n                    if(process.env.DEBUG == 'true')\n                        console.log(`[ Plugins ] - Load ${pluginPath}`);\n\n                    var pluginRequest = require(path.resolve(pluginPath));\n\n                    if(typeof pluginRequest == \"function\")\n                        await pluginRequest();\n                    else if(typeof pluginRequest.default == \"function\")\n                        await pluginRequest.default();\n                });\n\n                resolve();\n            });\n        } catch(e){\n            console.log(`[ Plugins ] - ${e.message}`);\n            reject();\n        }\n    });\n};\n\n//Controllers\nexport let controllers = async (controllersPath) => {\n    return new Promise(async (resolve, reject) => {\n        try{\n            const controllersPathResolve = path.join(process.cwd(), controllersPath);\n\n            await globby([`${controllersPathResolve}/*.js`, `${controllersPathResolve}/**/*.js`]).then(async (paths) => {\n                paths.forEach(async (controllerPath) => {\n                    if(process.env.DEBUG == 'true')\n                        console.log(`[ Controllers ] - Load ${pluginPath}`);\n\n                    var controllerRequest = require(path.resolve(controllerPath));\n\n                    if(typeof controllerRequest == \"function\")\n                        await controllerRequest();\n                    else if(typeof controllerRequest.default == \"function\")\n                        await controllerRequest.default();\n                });\n\n                resolve();\n            });\n        }\n        catch(e){\n            console.log(`[ Controllers ] - ${e.message}`);\n            reject();\n        }\n    });\n\n}\n"]}