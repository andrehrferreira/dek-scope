{"version":3,"sources":["../src/index.js"],"names":["Scope","get","name","hasOwnProperty","e","console","log","message","set","value","exports","use","obj","Object","keys","forEach","key","$","plugins","pluginsPath","pluginsPathResolve","path","join","process","cwd","then","paths","pluginPath","pluginRequest","require","resolve","default","controllers","controllersPath","controllersPathResolve","controllerPath","controllerRequest"],"mappings":"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","file":"index.js","sourcesContent":["//Global scope driver\n\nimport path from \"path\";\nimport globby from \"globby\";\nimport _ from \"lodash\";\n\nvar Scope = {};\n\nScope.get = function(name) {\n    try{\n        if(this.hasOwnProperty(name))\n            return this[name]\n        else\n            throw `${name} does not exist in scope`;\n    }\n    catch(e){\n        console.log(e.message);\n        return false;\n    }\n};\n\nScope.set = function(name, value) {\n    try{\n        if(this.hasOwnProperty(name))\n            console.log(`${name} was replaced by the value ${value}`);\n    } catch(e) { }\n\n    if(name !== \"get\" && name !== \"set\" && name !== \"use\"){\n        this[name] = value;\n        exports[name] = value;\n    }\n    else{\n        console.log(`Do not use the names \"get\", \"set\" or \"use\"`);\n    }\n};\n\nScope.use = function(obj) {\n    if(typeof obj == \"object\"){\n        Object.keys(obj).forEach((key) => {\n            this[key] = obj[key];\n        });\n    }\n};\n\nexport let $ = Scope;\nexport default Scope;\n\n//Plugins\nexport let plugins = async (pluginsPath) => {\n    const pluginsPathResolve = path.join(process.cwd(), pluginsPath);\n\n    return await globby([`${pluginsPathResolve}/build/index.js`, `${pluginsPathResolve}/*/build/index.js`]).then((paths) => {\n        paths.forEach(async (pluginPath) => {\n            var pluginRequest = require(path.resolve(pluginPath));\n\n            if(typeof pluginRequest == \"function\")\n                await pluginRequest();\n            else if(typeof pluginRequest.default == \"function\")\n                await pluginRequest.default();\n        });\n    });\n};\n\n//Controllers\nexport let controllers = async (controllersPath) => {\n    const controllersPathResolve = path.join(process.cwd(), controllersPath);\n\n    return await globby([`${controllersPathResolve}/*.js`, `${controllersPathResolve}/**/*.js`]).then((paths) => {\n        paths.forEach(async (controllerPath) => {\n            var controllerRequest = require(path.resolve(controllerPath));\n\n            if(typeof controllerRequest == \"function\")\n                await controllerRequest();\n            else if(typeof controllerRequest.default == \"function\")\n                await controllerRequest.default();\n        });\n\n        return true;\n    });\n}\n"]}